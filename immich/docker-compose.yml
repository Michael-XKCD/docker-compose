# See https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml for latest image versions

networks:
  backend:
    internal: true
  proxynet:
    external: true

# volumes:
#   model-cache:

services:
  immich-server:
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    container_name: immich
    depends_on:
      - redis
      - database
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    networks:
      - proxynet
      - backend
    environment:
      DB_PASSWORD: ${DB_PASSWORD}
      DB_USERNAME: ${DB_USERNAME}
      DB_DATABASE_NAME: ${DB_DATABASE_NAME}
      PUID: 99
      PGID: 100
      UMASK: 022
      TZ: America/Vancouver
    healthcheck:
      disable: false

  immich-machine-learning:
    container_name: immich-ml
    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    # volumes:
    #   - model-cache:/cache
    networks:
      - backend
    healthcheck:
      disable: false

  redis:
    image: ${REDIS_IMAGE}
    container_name: immich-redis
    volumes:
      - ${APPDATA_PATH}/redis-cache:/data
    networks:
      - backend
    healthcheck:
      test: redis-cli ping || exit 1

  database:
    image: ${DB_IMAGE}
    container_name: immich-db
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${APPDATA_PATH}/db:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      # start_interval: 30s
      # start_period: 5m
      # Note that Unraid v6.12.10 uses version 24.0.9 of the Docker Engine,
      # which does not support healthcheck start_interval as defined in the
      # database service of the Docker compose file (version 25 or higher is needed).
      # This parameter defines an initial waiting period before starting health checks,
      # to give the container time to start up. Commenting out the start_interval and start_period parameters
      # will allow the containers to start up normally. The only downside to this is that the
      # database container will not receive an initial health check until interval time has passed.
      # See: https://immich.app/docs/install/unraid
    command: ["postgres", "-c", "shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
